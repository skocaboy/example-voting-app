# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  dockerRegistrySvcConn: 'acrdemo2306-svconn'
  imageRepoVote: examplevotingapp_vote
  imageRepoResult: examplevotingapp_result
  imageRepoWorker: examplevotingapp_worker
  imageRepoRedis: library/redis:alpine
  imageRepoPostgres: library/postgres:9.4
  containerRegistry: 'acrdemo2306.azurecr.io'
  dockerfileVote: vote/Dockerfile
  dockerfileResult: result/Dockerfile
  dockerfileWorker: worker/Dockerfile
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an push vote app image
      inputs:
        containerRegistry: $(dockerRegistrySvcConn)
        repository: '$(imageRepoVote)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/$(dockerfileVote)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build an push result app image
      inputs:
        containerRegistry: $(dockerRegistrySvcConn)
        repository: '$(imageRepoResult)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/$(dockerfileResult)'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build an push worker app image
      inputs:
        containerRegistry: $(dockerRegistrySvcConn)
        repository: '$(imageRepoWorker)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/$(dockerfileWorker)'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/k8s-specifications'
        artifact: 'manifests'
        publishLocation: 'pipeline'
- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build
  variables:
    acrsecret: votingappauth
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'skocaboy-dev.default' #namespace gerekli
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:        
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              # kubernetesServiceConnection: 'skocaboy-dev-aksprod-vote-1655981154693'  ==> env ile gerekmiyor
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: $(dockerRegistrySvcConn)
          - task: KubernetesManifest@0
            displayName: Deploy All Apps
            inputs:
              action: 'deploy'
              # kubernetesServiceConnection: 'skocaboy-dev-aksprod-vote-1655981154693'  ==> env ile gerekmiyor
              manifests: |
                $(Pipeline.Workspace)/manifests/vote-deployment.yaml
                $(Pipeline.Workspace)/manifests/vote-service.yaml
                $(Pipeline.Workspace)/manifests/result-deployment.yaml
                $(Pipeline.Workspace)/manifests/result-service.yaml
                $(Pipeline.Workspace)/manifests/db-deployment.yaml
                $(Pipeline.Workspace)/manifests/db-service.yaml
                $(Pipeline.Workspace)/manifests/redis-deployment.yaml
                $(Pipeline.Workspace)/manifests/redis-service.yaml
                $(Pipeline.Workspace)/manifests/worker-deployment.yaml
              imagePullSecrets: |
                $(acrsecret)
              containers: |
                $(containerRegistry)/$(imageRepoVote):$(tag)
                $(containerRegistry)/$(imageRepoResult):$(tag)
                $(containerRegistry)/$(imageRepoWorker):$(tag)
                $(containerRegistry)/$(imageRepoPostgres)
                $(containerRegistry)/$(imageRepoRedis)